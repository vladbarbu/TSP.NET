//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using PhotoProps;

namespace PhotoProps
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Photo", Namespace="http://schemas.datacontract.org/2004/07/PhotoProps", IsReference=true)]
    public partial class Photo : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private System.DateTime Photo_DateField;
        
        private int Photo_IdField;
        
        private string Photo_PathField;
        
        private PhotoProps.Props[] PropsField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Photo_Date
        {
            get
            {
                return this.Photo_DateField;
            }
            set
            {
                this.Photo_DateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Photo_Id
        {
            get
            {
                return this.Photo_IdField;
            }
            set
            {
                this.Photo_IdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Photo_Path
        {
            get
            {
                return this.Photo_PathField;
            }
            set
            {
                this.Photo_PathField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public PhotoProps.Props[] Props
        {
            get
            {
                return this.PropsField;
            }
            set
            {
                this.PropsField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Props", Namespace="http://schemas.datacontract.org/2004/07/PhotoProps", IsReference=true)]
    public partial class Props : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private PhotoProps.Photo PhotoField;
        
        private int PhotoPhoto_IdField;
        
        private string Property_DescriptionField;
        
        private int Property_IdField;
        
        private string Property_NameField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public PhotoProps.Photo Photo
        {
            get
            {
                return this.PhotoField;
            }
            set
            {
                this.PhotoField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PhotoPhoto_Id
        {
            get
            {
                return this.PhotoPhoto_IdField;
            }
            set
            {
                this.PhotoPhoto_IdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Property_Description
        {
            get
            {
                return this.Property_DescriptionField;
            }
            set
            {
                this.Property_DescriptionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Property_Id
        {
            get
            {
                return this.Property_IdField;
            }
            set
            {
                this.Property_IdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Property_Name
        {
            get
            {
                return this.Property_NameField;
            }
            set
            {
                this.Property_NameField = value;
            }
        }
    }
}


[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(ConfigurationName="IPhotoProps")]
public interface IPhotoProps
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfacePhotos/AddPhoto", ReplyAction="http://tempuri.org/InterfacePhotos/AddPhotoResponse")]
    bool AddPhoto(PhotoProps.Photo photo);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfacePhotos/AddPhoto", ReplyAction="http://tempuri.org/InterfacePhotos/AddPhotoResponse")]
    System.Threading.Tasks.Task<bool> AddPhotoAsync(PhotoProps.Photo photo);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfacePhotos/UpdatePhoto", ReplyAction="http://tempuri.org/InterfacePhotos/UpdatePhotoResponse")]
    PhotoProps.Photo UpdatePhoto(PhotoProps.Photo photo);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfacePhotos/UpdatePhoto", ReplyAction="http://tempuri.org/InterfacePhotos/UpdatePhotoResponse")]
    System.Threading.Tasks.Task<PhotoProps.Photo> UpdatePhotoAsync(PhotoProps.Photo photo);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfacePhotos/DeletePhoto", ReplyAction="http://tempuri.org/InterfacePhotos/DeletePhotoResponse")]
    int DeletePhoto(int id);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfacePhotos/DeletePhoto", ReplyAction="http://tempuri.org/InterfacePhotos/DeletePhotoResponse")]
    System.Threading.Tasks.Task<int> DeletePhotoAsync(int id);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfacePhotos/GetPhotoById", ReplyAction="http://tempuri.org/InterfacePhotos/GetPhotoByIdResponse")]
    PhotoProps.Photo GetPhotoById(int id);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfacePhotos/GetPhotoById", ReplyAction="http://tempuri.org/InterfacePhotos/GetPhotoByIdResponse")]
    System.Threading.Tasks.Task<PhotoProps.Photo> GetPhotoByIdAsync(int id);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfacePhotos/GetPhotos", ReplyAction="http://tempuri.org/InterfacePhotos/GetPhotosResponse")]
    PhotoProps.Photo[] GetPhotos();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfacePhotos/GetPhotos", ReplyAction="http://tempuri.org/InterfacePhotos/GetPhotosResponse")]
    System.Threading.Tasks.Task<PhotoProps.Photo[]> GetPhotosAsync();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceProps/AddProp", ReplyAction="http://tempuri.org/InterfaceProps/AddPropResponse")]
    bool AddProp(PhotoProps.Props prop);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceProps/AddProp", ReplyAction="http://tempuri.org/InterfaceProps/AddPropResponse")]
    System.Threading.Tasks.Task<bool> AddPropAsync(PhotoProps.Props prop);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceProps/UpdateProp", ReplyAction="http://tempuri.org/InterfaceProps/UpdatePropResponse")]
    PhotoProps.Props UpdateProp(PhotoProps.Props newProp);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceProps/UpdateProp", ReplyAction="http://tempuri.org/InterfaceProps/UpdatePropResponse")]
    System.Threading.Tasks.Task<PhotoProps.Props> UpdatePropAsync(PhotoProps.Props newProp);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceProps/GetPropById", ReplyAction="http://tempuri.org/InterfaceProps/GetPropByIdResponse")]
    PhotoProps.Props GetPropById(int id);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceProps/GetPropById", ReplyAction="http://tempuri.org/InterfaceProps/GetPropByIdResponse")]
    System.Threading.Tasks.Task<PhotoProps.Props> GetPropByIdAsync(int id);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface IPhotoPropsChannel : IPhotoProps, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class PhotoPropsClient : System.ServiceModel.ClientBase<IPhotoProps>, IPhotoProps
{
    
    public PhotoPropsClient()
    {
    }
    
    public PhotoPropsClient(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public PhotoPropsClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public PhotoPropsClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public PhotoPropsClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public bool AddPhoto(PhotoProps.Photo photo)
    {
        return base.Channel.AddPhoto(photo);
    }
    
    public System.Threading.Tasks.Task<bool> AddPhotoAsync(PhotoProps.Photo photo)
    {
        return base.Channel.AddPhotoAsync(photo);
    }
    
    public PhotoProps.Photo UpdatePhoto(PhotoProps.Photo photo)
    {
        return base.Channel.UpdatePhoto(photo);
    }
    
    public System.Threading.Tasks.Task<PhotoProps.Photo> UpdatePhotoAsync(PhotoProps.Photo photo)
    {
        return base.Channel.UpdatePhotoAsync(photo);
    }
    
    public int DeletePhoto(int id)
    {
        return base.Channel.DeletePhoto(id);
    }
    
    public System.Threading.Tasks.Task<int> DeletePhotoAsync(int id)
    {
        return base.Channel.DeletePhotoAsync(id);
    }
    
    public PhotoProps.Photo GetPhotoById(int id)
    {
        return base.Channel.GetPhotoById(id);
    }
    
    public System.Threading.Tasks.Task<PhotoProps.Photo> GetPhotoByIdAsync(int id)
    {
        return base.Channel.GetPhotoByIdAsync(id);
    }
    
    public PhotoProps.Photo[] GetPhotos()
    {
        return base.Channel.GetPhotos();
    }
    
    public System.Threading.Tasks.Task<PhotoProps.Photo[]> GetPhotosAsync()
    {
        return base.Channel.GetPhotosAsync();
    }
    
    public bool AddProp(PhotoProps.Props prop)
    {
        return base.Channel.AddProp(prop);
    }
    
    public System.Threading.Tasks.Task<bool> AddPropAsync(PhotoProps.Props prop)
    {
        return base.Channel.AddPropAsync(prop);
    }
    
    public PhotoProps.Props UpdateProp(PhotoProps.Props newProp)
    {
        return base.Channel.UpdateProp(newProp);
    }
    
    public System.Threading.Tasks.Task<PhotoProps.Props> UpdatePropAsync(PhotoProps.Props newProp)
    {
        return base.Channel.UpdatePropAsync(newProp);
    }
    
    public PhotoProps.Props GetPropById(int id)
    {
        return base.Channel.GetPropById(id);
    }
    
    public System.Threading.Tasks.Task<PhotoProps.Props> GetPropByIdAsync(int id)
    {
        return base.Channel.GetPropByIdAsync(id);
    }
}
